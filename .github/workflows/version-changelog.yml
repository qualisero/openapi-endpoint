name: Post-Merge Version and Changelog Update

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  create-version-issue:
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.title, 'changelog') &&
      !contains(github.event.pull_request.title, 'version') &&
      !contains(github.event.pull_request.head.ref, 'changelog') &&
      !contains(github.event.pull_request.head.ref, 'version')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Create version and changelog update issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = `## Version and Changelog Update Required

            A pull request has been merged to main. Please update the package version and changelog according to the following guidelines:

            ### Version Management Guidelines

            **ALWAYS** bump the package version for every code change:
            - For new features or API signature changes: increment minor version (e.g., 0.3.1 → 0.4.0)
            - For bug fixes, patches, and small code changes: increment patch version (e.g., 0.3.0 → 0.3.1)
            - For breaking changes: increment major version (e.g., 0.4.0 → 1.0.0)
            - Update the version in \`package.json\` before committing any code changes
            - This ensures proper release tracking and dependency management
            - Updated the `?refresh=` query param on the README badge with latest timestamp (to force a refresh)

            ### Changelog Management Guidelines

            **ALWAYS** update the CHANGELOG.md for every code change:
            - Add a new section at the top for the new version following [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) format
            - Use sections: Added, Changed, Deprecated, Removed, Fixed, Security
            - Keep entries concise and focused on user-facing changes
            - For patch versions: use brief, single-line descriptions focusing on what was fixed or improved
            - For minor versions: include more detail about new features and their benefits
            - Skip implementation details unless they directly impact the user experience
            - This ensures proper release documentation and user awareness of changes

            ### Tasks

            - [ ] Review the merged PR changes: ${context.payload.pull_request.html_url}
            - [ ] Determine appropriate version increment based on the changes
            - [ ] Update version in \`package.json\`
            - [ ] Add new section to \`CHANGELOG.md\` with appropriate changes
            - [ ] Ensure changelog entries are concise and user-focused
            - [ ] Update \`README.md\` if necessary (new features, API changes, or installation instructions)
            - [ ] Create pull request with version and changelog updates, with explicit title (eg "Bumping version from x.x to x.y and updating changelog")

            ### Reference

            - Merged PR: ${context.payload.pull_request.title} (#${context.payload.pull_request.number})
            - PR URL: ${context.payload.pull_request.html_url}
            - Author: @${context.payload.pull_request.user.login}
            `;

            const issueData = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Update version and changelog after PR #${context.payload.pull_request.number}`,
              body: issueBody,
              labels: ['version-update', 'changelog', 'automated']
            };

            // Create the issue first
            const createdIssue = await github.rest.issues.create(issueData);
            console.log(`Created issue #${createdIssue.data.number}`);

            // Now assign Copilot to the issue using GraphQL API
            try {
              // Get the issue ID using GraphQL
              const issueQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      id
                    }
                  }
                }
              `;

              const issueResponse = await github.graphql(issueQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: createdIssue.data.number
              });

              const issueId = issueResponse.repository.issue.id;
              console.log(`Issue GraphQL ID: ${issueId}`);

              // Get Copilot user ID using the correct GraphQL query
              const copilotQuery = `
                query($login: String!) {
                  user(login: $login) {
                    id
                    login
                  }
                }
              `;

              const copilotResponse = await github.graphql(copilotQuery, {
                login: "copilot-swe-agent"
              });

              const copilotUser = copilotResponse.user;
              
              if (copilotUser && copilotUser.id) {
                const copilotId = copilotUser.id;
                console.log(`Copilot user ID: ${copilotId}`);

                // Assign Copilot to the issue
                const assignMutation = `
                  mutation($issueId: ID!, $assigneeIds: [ID!]!) {
                    addAssigneesToAssignable(input: {assignableId: $issueId, assigneeIds: $assigneeIds}) {
                      clientMutationId
                    }
                  }
                `;

                await github.graphql(assignMutation, {
                  issueId: issueId,
                  assigneeIds: [copilotId]
                });

                console.log(`Successfully assigned Copilot to issue #${createdIssue.data.number}`);
              } else {
                console.log('Copilot user not found');
              }
            } catch (error) {
              console.log(`Failed to assign Copilot to issue: ${error.message}`);
              console.log('Issue created successfully but Copilot assignment failed');
            }
