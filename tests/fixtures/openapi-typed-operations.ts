// Auto-generated from OpenAPI specification
// Do not edit this file manually

import type { operations } from './openapi-types'

export enum HttpMethod {
  GET = 'GET',
  POST = 'POST',
  PUT = 'PUT',
  PATCH = 'PATCH',
  DELETE = 'DELETE',
  HEAD = 'HEAD',
  OPTIONS = 'OPTIONS',
  TRACE = 'TRACE',
}

// Create the typed structure that combines operations with operation metadata
// This ensures the debug method returns correct values and all operations are properly typed
const operationsBase = {
  listPets: {
    path: '/pets',
    method: HttpMethod.GET,
  },
  createPet: {
    path: '/pets',
    method: HttpMethod.POST,
  },
  getPet: {
    path: '/pets/{petId}',
    method: HttpMethod.GET,
  },
  updatePet: {
    path: '/pets/{petId}',
    method: HttpMethod.PUT,
  },
  deletePet: {
    path: '/pets/{petId}',
    method: HttpMethod.DELETE,
  },
  listUserPets: {
    path: '/users/{userId}/pets',
    method: HttpMethod.GET,
  },
} as const

// Merge with operations type to maintain OpenAPI type information
export const openApiOperations = operationsBase as typeof operationsBase & operations

export type OpenApiOperations = typeof openApiOperations

// Dynamically generate OperationId enum from the operations keys
export const OperationId = {
  listPets: 'listPets' as const,
  createPet: 'createPet' as const,
  getPet: 'getPet' as const,
  updatePet: 'updatePet' as const,
  deletePet: 'deletePet' as const,
  listUserPets: 'listUserPets' as const,
} satisfies Record<keyof typeof operationsBase, keyof typeof operationsBase>

// Export the type for TypeScript inference
export type OperationId = keyof OpenApiOperations
